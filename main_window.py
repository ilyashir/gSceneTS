from PyQt6.QtWidgets import (
    QMainWindow, QToolBar, QToolButton, QPushButton, QLineEdit, QWidget, QHBoxLayout, QVBoxLayout, QLabel,
    QCheckBox, QSpacerItem, QSizePolicy, QFileDialog, QDockWidget, QSpinBox, QDoubleSpinBox, QButtonGroup, QStatusBar, QFrame, QMessageBox
)
from PyQt6.QtGui import QIcon, QAction
from PyQt6.QtCore import Qt, pyqtSignal, QTimer, QPointF
from field_widget import FieldWidget
from properties.properties_window_adapter import PropertiesWindow
import xml.etree.ElementTree as ET
from xml.dom import minidom 
import logging
from styles import AppStyles
from config import config
from utils.transparent_scrollbar import apply_scrollbars_to_graphics_view
from utils.keyboard_shortcuts import AppShortcutsManager
from utils.xml_handler import XMLHandler, XMLValidationError  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ XML
import os
import sys
from __init__ import __version__  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–æ–¥—É–ª—è

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

class MainWindow(QMainWindow):
    scene_size_changed = pyqtSignal(int, int)  # width, height

    def __init__(self):
        super().__init__()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        app_name = config.get("app", "name")
        self.scene_width = config.get("scene", "default_width")
        self.scene_height = config.get("scene", "default_height")
        self.grid_size = config.get("grid", "size")
        self.snap_to_grid_default = config.get("grid", "snap_to_grid")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
        self.is_dark_theme = config.get("appearance", "theme") == "dark"
        
        self.setWindowTitle(app_name)
        self.resize(1200, 800)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        self.showMaximized()  # –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –∫ –≥–ª–∞–≤–Ω–æ–º—É –æ–∫–Ω—É
        self.apply_theme()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Ç–µ–º—ã
        self.coords_panel = QWidget()
        coords_layout = QHBoxLayout()
        coords_layout.setContentsMargins(5, 5, 5, 5)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        self.coords_label = QLabel("X: 0, Y: 0", self)
        self.coords_label.setStyleSheet(AppStyles.get_coords_label_style(self.is_dark_theme))
        coords_layout.addWidget(self.coords_label)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –±—ã–ª —Å–ø—Ä–∞–≤–∞
        coords_layout.addStretch()
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã
        self.theme_switch = QPushButton("üåô" if not self.is_dark_theme else "‚òÄÔ∏è", self)
        self.theme_switch.setStyleSheet(AppStyles.get_theme_switch_style(self.is_dark_theme))
        self.theme_switch.setCursor(Qt.CursorShape.PointingHandCursor)
        self.theme_switch.clicked.connect(self.toggle_theme)
        self.theme_switch.setToolTip("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É")
        coords_layout.addWidget(self.theme_switch)
        
        self.coords_panel.setLayout(coords_layout)

        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Å–≤–æ–π—Å—Ç–≤
        logger.debug(f"–°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Å–≤–æ–π—Å—Ç–≤, is_dark_theme: {self.is_dark_theme}")
        self.properties_window = PropertiesWindow(self, is_dark_theme=self.is_dark_theme)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É –¥–ª—è –æ–∫–Ω–∞ —Å–≤–æ–π—Å—Ç–≤
        if hasattr(self.properties_window, 'set_theme'):
            logger.debug("–í—ã–∑—ã–≤–∞–µ–º set_theme –¥–ª—è –æ–∫–Ω–∞ —Å–≤–æ–π—Å—Ç–≤")
            self.properties_window.set_theme(self.is_dark_theme)
        else:
            logger.debug("–ú–µ—Ç–æ–¥ set_theme –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –Ω–∞–ø—Ä—è–º—É—é")
            self.properties_window.setStyleSheet(
                AppStyles.DARK_PROPERTIES_WINDOW if self.is_dark_theme else AppStyles.LIGHT_PROPERTIES_WINDOW
            )
        self.properties_dock = QDockWidget("–°–≤–æ–π—Å—Ç–≤–∞", self)
        self.properties_dock.setWidget(self.properties_window)
        self.properties_dock.setStyleSheet(
            AppStyles.DARK_PROPERTIES_WINDOW if self.is_dark_theme else AppStyles.LIGHT_PROPERTIES_WINDOW
        )
        self.addDockWidget(Qt.DockWidgetArea.RightDockWidgetArea, self.properties_dock)
        self.properties_dock.show()  # –Ø–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º dock-–≤–∏–¥–∂–µ—Ç
        logger.debug(f"Dock-–≤–∏–¥–∂–µ—Ç —Å–≤–æ–π—Å—Ç–≤ —Å–æ–∑–¥–∞–Ω, –≤–∏–¥–∏–º–æ—Å—Ç—å: {self.properties_dock.isVisible()}")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ FieldWidget
        container = QWidget()
        layout = QVBoxLayout()
        layout.addWidget(self.coords_panel)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–∫–Ω–æ —Å –ø–æ–ª–µ–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.field_widget = FieldWidget(self.properties_window, 
                                        scene_width=self.scene_width, 
                                        scene_height=self.scene_height,
                                        grid_size=self.grid_size)

        # –Ø–≤–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º field_widget –∫ properties_window
        if hasattr(self.properties_window, 'connect_to_field_widget'):
            logger.debug("–Ø–≤–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º field_widget –∫ properties_window")
            self.properties_window.connect_to_field_widget(self.field_widget)

        vsb, hsb = apply_scrollbars_to_graphics_view(
            self.field_widget,
            bg_alpha=5,          # –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Ñ–æ–Ω–∞
            handle_alpha=100,     # –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –ø–æ–ª–∑—É–Ω–∫–∞
            hover_alpha=170,      # –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
            pressed_alpha=200,    # –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
            scroll_bar_width=15,  # –®–∏—Ä–∏–Ω–∞ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞
            use_dark_theme=False,  # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
            auto_hide=True        # –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫—Ä–æ–ª–ª–±–∞—Ä–æ–≤ –≤ FieldWidget
        if hasattr(self.field_widget, '_scroll_manager'):
            self.field_widget._scroll_manager = getattr(self.field_widget, '_scroll_manager')

        layout.addWidget(self.field_widget)
    
        container.setLayout(layout)
        self.setCentralWidget(container)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.scene_size_changed.connect(self.field_widget.set_scene_size)
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –æ–∫–Ω–∞ —Å–≤–æ–π—Å—Ç–≤
        self.properties_window.robot_position_changed.connect(self.field_widget.update_robot_position)
        self.properties_window.robot_rotation_changed.connect(self.field_widget.update_robot_rotation)
        self.properties_window.wall_position_point1_changed.connect(self.field_widget.update_wall_point1)
        self.properties_window.wall_position_point2_changed.connect(self.field_widget.update_wall_point2)
        self.properties_window.wall_size_changed.connect(self.field_widget.update_wall_size)
        self.properties_window.region_position_changed.connect(self.field_widget.update_region_position)
        self.properties_window.region_size_changed.connect(self.field_widget.update_region_size)
        self.properties_window.region_color_changed.connect(self.field_widget.update_region_color)
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è ID –æ—Ç –æ–∫–Ω–∞ —Å–≤–æ–π—Å—Ç–≤
        self.properties_window.wall_id_changed.connect(self.field_widget.update_wall_id)
        self.properties_window.region_id_changed.connect(self.field_widget.update_region_id)
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º—ã—à–∏
        self.field_widget.mouse_coords_updated.connect(self.update_coords_label)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è/–æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ —Å–≤–æ–π—Å—Ç–≤
        self.toggle_properties_button = QToolButton(self)
        self.toggle_properties_button.setIcon(QIcon("images/icon.webp"))  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ
        self.toggle_properties_button.setToolTip("Toggle Properties")
        self.toggle_properties_button.setStyleSheet(AppStyles.get_toggle_button_style(self.is_dark_theme))
        self.toggle_properties_button.clicked.connect(self.toggle_properties_panel)        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏
        self.toggle_properties_button.setCursor(Qt.CursorShape.PointingHandCursor)
        self.toggle_properties_button.setToolTip("–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —Å–≤–æ–π—Å—Ç–≤")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        self.right_toolbar = QToolBar("Right Toolbar", self)
        self.right_toolbar.addWidget(self.toggle_properties_button)
        self.addToolBar(Qt.ToolBarArea.RightToolBarArea, self.right_toolbar)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–µ–≤–∞—è –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.toolbar = QToolBar()
        self.toolbar.setMinimumWidth(180)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.addToolBar(Qt.ToolBarArea.LeftToolBarArea, self.toolbar)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        self.create_scene_size_widget()

        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å "–ü—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å—Å—è –∫ —Å–µ—Ç–∫–µ"
        snap_to_grid_container = QWidget()
        snap_to_grid_layout = QHBoxLayout()
        snap_to_grid_layout.setContentsMargins(10, 0, 0, 0)  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞
        
        self.snap_to_grid_checkbox = QCheckBox("–ü—Ä–∏–≤—è–∑–∞—Ç—å—Å—è –∫ —Å–µ—Ç–∫–µ", self)
        self.snap_to_grid_checkbox.setStyleSheet(AppStyles.DARK_CHECKBOX_STYLE if self.is_dark_theme else AppStyles.LIGHT_CHECKBOX_STYLE)
        self.snap_to_grid_checkbox.setChecked(self.field_widget.snap_to_grid_enabled)
        self.snap_to_grid_checkbox.stateChanged.connect(self.toggle_snap_to_grid)
        self.snap_to_grid_checkbox.setCursor(Qt.CursorShape.PointingHandCursor)
        
        snap_to_grid_layout.addWidget(self.snap_to_grid_checkbox)
        snap_to_grid_container.setLayout(snap_to_grid_layout)
        self.toolbar.addWidget(snap_to_grid_container)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–æ–≤
        self.create_mode_buttons()
        self.create_drawing_buttons()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML
        separator_container = QWidget()
        separator_layout = QVBoxLayout()
        separator_layout.setContentsMargins(5, 10, 5, 10)  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É
        
        separator = QFrame()
        separator.setFrameShape(QFrame.Shape.HLine)
        separator.setFrameShadow(QFrame.Shadow.Sunken)
        separator.setMinimumHeight(2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –ª–∏–Ω–∏–∏
        separator.setStyleSheet(f"background-color: {AppStyles.BORDER_COLOR if self.is_dark_theme else AppStyles.LIGHT_BORDER_COLOR};")
        
        separator_layout.addWidget(separator)
        separator_container.setLayout(separator_layout)
        self.toolbar.addWidget(separator_container)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML
        generate_button = QPushButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å XML")
        generate_button.setStyleSheet(AppStyles.get_accent_button_style(self.is_dark_theme))
        generate_button.clicked.connect(self.generate_xml)
        generate_button.setCursor(Qt.CursorShape.PointingHandCursor)
        self.toolbar.addWidget(generate_button)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.set_mode("observer")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_cursors()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        self.shortcuts_manager = AppShortcutsManager(self)
        self.shortcuts_manager.setup_all_shortcuts()
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª –≤ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        self.add_shortcuts_help_button()
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.create_menubar()
        
        logger.debug("–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    
    def setup_cursors(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫—É—Ä—Å–æ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        for button in self.findChildren(QPushButton) + self.findChildren(QToolButton):
            button.setCursor(Qt.CursorShape.PointingHandCursor)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä—ã –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
        for checkbox in self.findChildren(QCheckBox):
            checkbox.setCursor(Qt.CursorShape.PointingHandCursor)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä—ã –¥–ª—è SpinBox
        for spinbox in self.findChildren(QSpinBox) + self.findChildren(QDoubleSpinBox):
            # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Å–ø–∏–Ω–±–æ–∫—Å–∞
            for child in spinbox.findChildren(QWidget):
                if 'Button' in child.__class__.__name__:
                    child.setCursor(Qt.CursorShape.PointingHandCursor)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è properties_window
        if hasattr(self, 'properties_window'):
            self.properties_window.setup_cursors()
    
    def update_coords_label(self, x, y):
        # –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ QLabel —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –º—ã—à–∏.
        self.coords_label.setText(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º—ã—à–∏: X: {x:.2f}, Y: {y:.2f}")

    def toggle_snap_to_grid(self, state):
        """–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç –ø—Ä–∏–≤—è–∑–∫—É –∫ —Å–µ—Ç–∫–µ."""
        enabled = state == Qt.CheckState.Checked.value
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ set_grid_snap –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞,
        # —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —ç–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª grid_snap_changed
        self.field_widget.set_grid_snap(enabled)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –∫–æ–Ω—Ñ–∏–≥
        config.set("grid", "snap_to_grid", enabled)
    
    def toggle_properties_panel(self):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å–≤–æ–π—Å—Ç–≤."""
        logger.debug(f"–í—ã–∑–≤–∞–Ω toggle_properties_panel, —Ç–µ–∫—É—â–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å: {self.properties_dock.isVisible()}")
        if self.properties_dock.isVisible():
            logger.debug("–°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Å–≤–æ–π—Å—Ç–≤")
            self.properties_dock.hide()
        else:
            logger.debug("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Å–≤–æ–π—Å—Ç–≤")
            self.properties_dock.show()
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–Ω–µ–ª—å –±—ã–ª–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞
        logger.debug(f"–ù–æ–≤–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–∞–Ω–µ–ª–∏ —Å–≤–æ–π—Å—Ç–≤: {self.properties_dock.isVisible()}")
    
    def create_scene_size_widget(self):
        size_widget = QWidget()
        size_layout = QVBoxLayout()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç
        size_layout.setSpacing(5)  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        size_layout.setContentsMargins(5, 0, 5, 0)  # –≤–Ω–µ—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã
        size_widget.setLayout(size_layout)

        # –õ–µ–π–±–ª "–†–∞–∑–º–µ—Ä —Å—Ü–µ–Ω—ã"
        self.size_label = QLabel("–†–∞–∑–º–µ—Ä —Å—Ü–µ–Ω—ã")
        self.size_label.setStyleSheet(AppStyles.get_mode_label_style(self.is_dark_theme))
        size_layout.addWidget(self.size_label)

        # –í–∏–¥–∂–µ—Ç –¥–ª—è –ª–µ–π–±–ª–æ–≤ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        input_labels_widget = QWidget()
        input_labels_layout = QHBoxLayout()  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç –¥–ª—è –ª–µ–π–±–ª–æ–≤ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        input_labels_layout.setSpacing(0)  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        input_labels_layout.setContentsMargins(5, 0, 5, 0)  
        input_labels_widget.setLayout(input_labels_layout)

        self.input_height_label = QLabel("–í—ã—Å–æ—Ç–∞ —Å—Ü–µ–Ω—ã:")
        self.input_width_label = QLabel("–®–∏—Ä–∏–Ω–∞ —Å—Ü–µ–Ω—ã:")
        input_labels_layout.addWidget(self.input_height_label)
        input_labels_layout.addWidget(self.input_width_label)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç —Å –ø–æ–ª—è–º–∏ –≤–≤–æ–¥–∞ –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç
        size_layout.addWidget(input_labels_widget)

        # –í–∏–¥–∂–µ—Ç –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        input_widget = QWidget()
        input_layout = QHBoxLayout()  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        input_layout.setSpacing(5)  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª—è–º–∏ –≤–≤–æ–¥–∞
        input_layout.setContentsMargins(0, 0, 0, 0)  # –£–±–∏—Ä–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã
        input_widget.setLayout(input_layout)

        # –ü–æ–ª–µ –¥–ª—è —à–∏—Ä–∏–Ω—ã
        self.width_input = QLineEdit(str(self.field_widget.scene_width))
        self.width_input.setPlaceholderText("Width")
        self.width_input.setCursor(Qt.CursorShape.IBeamCursor)
        input_layout.addWidget(self.width_input)

        # –ü–æ–ª–µ –¥–ª—è –≤—ã—Å–æ—Ç—ã
        self.height_input = QLineEdit(str(self.field_widget.scene_height))
        self.height_input.setPlaceholderText("Height")
        self.height_input.setCursor(Qt.CursorShape.IBeamCursor)
        input_layout.addWidget(self.height_input)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç —Å –ø–æ–ª—è–º–∏ –≤–≤–æ–¥–∞ –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç
        size_layout.addWidget(input_widget)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π   
        self.apply_button = QPushButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å", self)
        self.apply_button.setStyleSheet(AppStyles.get_accent_button_style(self.is_dark_theme))
        self.apply_button.setCursor(Qt.CursorShape.PointingHandCursor)
        self.apply_button.clicked.connect(self.apply_size_changes)
        size_layout.addWidget(self.apply_button)

        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
        spacer_widget = QWidget()
        spacer_widget.setFixedHeight(30)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –æ—Ç—Å—Ç—É–ø–∞
        size_layout.addWidget(spacer_widget)  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –Ω–∞ –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –Ω–∞ –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.toolbar.addWidget(size_widget)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        self.createScalePanel()

    def createScalePanel(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–æ–º"""
        scale_widget = QWidget()
        scale_layout = QVBoxLayout()
        scale_layout.setSpacing(5)
        scale_layout.setContentsMargins(5, 0, 5, 0)
        scale_widget.setLayout(scale_layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–ú–∞—Å—à—Ç–∞–±"
        self.scale_label = QLabel("–ú–∞—Å—à—Ç–∞–±")
        self.scale_label.setStyleSheet(AppStyles.get_mode_label_style(self.is_dark_theme))
        scale_layout.addWidget(self.scale_label)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        scale_buttons = QWidget()
        scale_buttons_layout = QHBoxLayout()
        scale_buttons_layout.setSpacing(8)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–∞–º–∏
        scale_buttons_layout.setContentsMargins(0, 0, 0, 0)
        scale_buttons.setLayout(scale_buttons_layout)
        
        # –ö–Ω–æ–ø–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
        self.zoom_out_button = QToolButton()
        self.zoom_out_button.setText("-")
        self.zoom_out_button.setToolTip("–£–º–µ–Ω—å—à–∏—Ç—å (–∏–ª–∏ Ctrl+–∫–æ–ª–µ—Å–∏–∫–æ –º—ã—à–∏ –≤–Ω–∏–∑)")
        self.zoom_out_button.clicked.connect(self.field_widget.zoomOut)
        self.zoom_out_button.setStyleSheet(AppStyles.get_scale_button_style(self.is_dark_theme))
        scale_buttons_layout.addWidget(self.zoom_out_button)
        
        # –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Å—à—Ç–∞–±–∞
        self.scale_display = QLineEdit()
        self.scale_display.setMaximumWidth(60)  # –î–µ–ª–∞–µ–º —á—É—Ç—å —à–∏—Ä–µ
        self.scale_display.setReadOnly(True)
        self.scale_display.setText("1.0")
        self.scale_display.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.scale_display.setToolTip("–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+–∫–æ–ª–µ—Å–∏–∫–æ –º—ã—à–∏")
        self.scale_display.setStyleSheet(AppStyles.get_scale_display_style(self.is_dark_theme))
        scale_buttons_layout.addWidget(self.scale_display)
        
        # –ö–Ω–æ–ø–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
        self.zoom_in_button = QToolButton()
        self.zoom_in_button.setText("+")
        self.zoom_in_button.setToolTip("–£–≤–µ–ª–∏—á–∏—Ç—å (–∏–ª–∏ Ctrl+–∫–æ–ª–µ—Å–∏–∫–æ –º—ã—à–∏ –≤–≤–µ—Ä—Ö)")
        self.zoom_in_button.clicked.connect(self.field_widget.zoomIn)
        self.zoom_in_button.setStyleSheet(AppStyles.get_scale_button_style(self.is_dark_theme))
        scale_buttons_layout.addWidget(self.zoom_in_button)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –º–∞—Å—à—Ç–∞–±–∞
        self.reset_zoom_button = QToolButton()
        self.reset_zoom_button.setText("1:1")
        self.reset_zoom_button.setToolTip("–°–±—Ä–æ—Å–∏—Ç—å –º–∞—Å—à—Ç–∞–±")
        self.reset_zoom_button.clicked.connect(self.field_widget.resetScale)
        self.reset_zoom_button.setStyleSheet(AppStyles.get_scale_button_style(self.is_dark_theme))
        scale_buttons_layout.addWidget(self.reset_zoom_button)
        
        scale_layout.addWidget(scale_buttons)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏
        scale_hint = QLabel("(Ctrl+–∫–æ–ª–µ—Å–∏–∫–æ –º—ã—à–∏)")
        scale_hint.setStyleSheet("font-size: 8pt; color: gray;")
        scale_layout.addWidget(scale_hint)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø
        spacer_widget = QWidget()
        spacer_widget.setFixedHeight(30)
        scale_layout.addWidget(spacer_widget)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –Ω–∞ –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.toolbar.addWidget(scale_widget)
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
        self.scale_update_timer = QTimer()
        self.scale_update_timer.setInterval(100)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 100 –º—Å
        self.scale_update_timer.timeout.connect(self.updateScaleDisplay)
        self.scale_update_timer.start()

    def updateScaleDisplay(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Å—à—Ç–∞–±–∞"""
        current_scale = self.field_widget.currentScale()
        self.scale_display.setText(f"{current_scale:.1f}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        self.zoom_in_button.setEnabled(current_scale < self.field_widget._max_scale)
        self.zoom_out_button.setEnabled(current_scale > self.field_widget._min_scale)

    def apply_size_changes(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–º–µ–Ω–∏—Ç—å'."""
        try:
            new_width = int(self.width_input.text())
            new_height = int(self.height_input.text())
        
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if new_width <= 0 or new_height <= 0:
                raise ValueError("Width and height must be greater than 0.")
        except ValueError as e:
            QMessageBox.warning(
                self,
                "–û—à–∏–±–∫–∞",
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã –∏–ª–∏ –≤—ã—Å–æ—Ç—ã: {e}",
                QMessageBox.StandardButton.Ok
            )
            return

        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å—Ü–µ–Ω—ã
        self.scene_size_changed.emit(new_width, new_height)

    def create_mode_buttons(self):
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–∂–∏–º–æ–≤
        mode_container = QWidget()
        mode_layout = QVBoxLayout()  # –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–¥–∞
        mode_layout.setSpacing(5)
        mode_layout.setContentsMargins(5, 0, 5, 0)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–†–µ–∂–∏–º"
        self.mode_label = QLabel("–†–µ–∂–∏–º")
        self.mode_label.setStyleSheet(AppStyles.get_mode_label_style(self.is_dark_theme))
        mode_layout.addWidget(self.mode_label)
        
        # –ì—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
        mode_buttons_group = QButtonGroup(self)

        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–∂–∏–º–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
        self.observer_button = QPushButton("–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å")
        self.observer_button.setCheckable(True)
        self.observer_button.setChecked(True)  # –í—ã–±—Ä–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.observer_button.setStyleSheet(self.get_mode_button_style())
        self.observer_button.clicked.connect(lambda: self.set_mode("observer"))
        self.observer_button.setCursor(Qt.CursorShape.PointingHandCursor)
        mode_layout.addWidget(self.observer_button)
        mode_buttons_group.addButton(self.observer_button)

        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.edit_button = QPushButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        self.edit_button.setCheckable(True)
        self.edit_button.setStyleSheet(self.get_mode_button_style())
        self.edit_button.clicked.connect(lambda: self.set_mode("edit"))
        self.edit_button.setCursor(Qt.CursorShape.PointingHandCursor)
        mode_layout.addWidget(self.edit_button)
        mode_buttons_group.addButton(self.edit_button)

        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        self.drawing_button = QPushButton("–†–∏—Å–æ–≤–∞–Ω–∏–µ")
        self.drawing_button.setCheckable(True)
        self.drawing_button.setStyleSheet(self.get_mode_button_style())
        self.drawing_button.clicked.connect(lambda: self.set_mode("drawing"))
        self.drawing_button.setCursor(Qt.CursorShape.PointingHandCursor)
        mode_layout.addWidget(self.drawing_button)
        mode_buttons_group.addButton(self.drawing_button)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫–µ—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        mode_container.setLayout(mode_layout)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.toolbar.addWidget(mode_container)

    def create_drawing_buttons(self):
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        drawing_container = QWidget()
        drawing_layout = QVBoxLayout()  # –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç
        drawing_layout.setSpacing(5)
        drawing_layout.setContentsMargins(5, 0, 5, 0)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–†–∏—Å–æ–≤–∞—Ç—å"
        self.drawing_label = QLabel("–†–∏—Å–æ–≤–∞—Ç—å")
        self.drawing_label.setStyleSheet(AppStyles.get_mode_label_style(self.is_dark_theme))
        drawing_layout.addWidget(self.drawing_label)
        
        # –ì—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        drawing_buttons_group = QButtonGroup(self)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Å—Ç–µ–Ω
        self.wall_button = QPushButton("–°—Ç–µ–Ω–∞")
        self.wall_button.setCheckable(True)
        self.wall_button.setStyleSheet(self.get_tool_button_style())
        self.wall_button.clicked.connect(lambda: self.set_drawing_type("wall"))
        self.wall_button.setEnabled(False)
        self.wall_button.setCursor(Qt.CursorShape.PointingHandCursor)
        drawing_layout.addWidget(self.wall_button)
        drawing_buttons_group.addButton(self.wall_button)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤
        self.region_button = QPushButton("–†–µ–≥–∏–æ–Ω")
        self.region_button.setCheckable(True)
        self.region_button.setStyleSheet(self.get_tool_button_style())
        self.region_button.clicked.connect(lambda: self.set_drawing_type("region"))
        self.region_button.setEnabled(False)
        self.region_button.setCursor(Qt.CursorShape.PointingHandCursor)
        drawing_layout.addWidget(self.region_button)
        drawing_buttons_group.addButton(self.region_button)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫–µ—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        drawing_container.setLayout(drawing_layout)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.toolbar.addWidget(drawing_container)
    
    def get_mode_button_style(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∏–ª—å –∫–Ω–æ–ø–æ–∫ —Ä–µ–∂–∏–º–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã"""
        return AppStyles.get_mode_button_style(self.is_dark_theme)
    
    def get_tool_button_style(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∏–ª—å –∫–Ω–æ–ø–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã"""
        return AppStyles.get_tool_button_style(self.is_dark_theme)

    def set_mode(self, mode):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã."""
        logger.debug(f"Setting mode to: {mode}")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–æ–≤
        self.observer_button.setChecked(False)
        self.drawing_button.setChecked(False)
        self.edit_button.setChecked(False)
        
        # –í–∫–ª—é—á–∞–µ–º –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É
        if mode == "observer":
            logger.debug("Switching to observer mode")
            self.observer_button.setChecked(True)
            self.wall_button.setEnabled(False)
            self.region_button.setEnabled(False)
            self.field_widget.set_drawing_mode(None)
            self.field_widget.set_edit_mode(False)
        elif mode == "drawing":
            logger.debug("Switching to drawing mode")
            self.drawing_button.setChecked(True)
            self.wall_button.setEnabled(True)
            self.region_button.setEnabled(True)
            self.field_widget.set_edit_mode(False)
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∂–∏–º
            if self.wall_button.isChecked():
                self.field_widget.set_drawing_mode("wall")
            elif self.region_button.isChecked():
                self.field_widget.set_drawing_mode("region")
        elif mode == "edit":
            logger.debug("Switching to edit mode")
            self.edit_button.setChecked(True)
            self.wall_button.setEnabled(False)
            self.region_button.setEnabled(False)
            self.field_widget.set_drawing_mode(None)
            self.field_widget.set_edit_mode(True)

    def set_drawing_type(self, drawing_type):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∏–ø —Ä–∏—Å–æ–≤–∞–Ω–∏—è (—Å—Ç–µ–Ω–∞ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω)."""
        logger.debug(f"Setting drawing type to: {drawing_type}")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –æ–±–µ –∫–Ω–æ–ø–∫–∏
        self.wall_button.setChecked(False)
        self.region_button.setChecked(False)
        
        # –í–∫–ª—é—á–∞–µ–º –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É
        if drawing_type == "wall":
            logger.debug("Setting wall drawing mode")
            self.wall_button.setChecked(True)
            self.field_widget.set_drawing_mode("wall")
        elif drawing_type == "region":
            logger.debug("Setting region drawing mode")
            self.region_button.setChecked(True)
            self.field_widget.set_drawing_mode("region")
        else:
            logger.debug("Clearing drawing mode")
            self.field_widget.set_drawing_mode(None)

    def generate_xml(self):
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä XMLHandler —Å —Ç–µ–∫—É—â–∏–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ —Å—Ü–µ–Ω—ã
            scene_width = self.field_widget.scene_width
            scene_height = self.field_widget.scene_height
            xml_handler = XMLHandler(scene_width=scene_width, scene_height=scene_height)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º XML —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
            formatted_xml = xml_handler.generate_xml(
                walls=self.field_widget.walls,
                regions=self.field_widget.regions,
                robot_model=self.field_widget.robot_model
            )

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π XML –≤ —Ñ–∞–π–ª
            file_name, _ = QFileDialog.getSaveFileName(self, "Save XML File", "", "XML Files (*.xml)")
            if file_name:
                with open(file_name, "w", encoding="utf-8") as file:
                    file.write(formatted_xml)

                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "XML —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")
        
        except XMLValidationError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ XML: {e}")
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ XML: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML: {e}", exc_info=True)
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é"""
        if self.is_dark_theme:
            # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
            self.setStyleSheet(AppStyles.DARK_MAIN_WINDOW)
            if hasattr(self, 'properties_window'):
                if hasattr(self.properties_window, 'set_theme'):
                    self.properties_window.set_theme(True)
                else:
                    self.properties_window.setStyleSheet(AppStyles.DARK_PROPERTIES_WINDOW)
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ –ø–æ–ª—é —Å—Ü–µ–Ω—ã
            if hasattr(self, 'field_widget') and hasattr(self.field_widget, 'set_theme'):
                self.field_widget.set_theme(True)
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫ QDockWidget
            if hasattr(self, 'properties_dock'):
                self.properties_dock.setStyleSheet(AppStyles.DARK_PROPERTIES_WINDOW)
            if hasattr(self, 'coords_label'):
                self.coords_label.setStyleSheet(AppStyles.DARK_COORDS_LABEL)
            if hasattr(self, 'theme_switch'):
                self.theme_switch.setStyleSheet(AppStyles.get_theme_switch_style(True))
                self.theme_switch.setText("‚òÄÔ∏è")  # –°–æ–ª–Ω—Ü–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å —á–µ–∫–±–æ–∫—Å–∞
            if hasattr(self, 'snap_to_grid_checkbox'):
                self.snap_to_grid_checkbox.setStyleSheet(AppStyles.DARK_CHECKBOX_STYLE)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –∫–Ω–æ–ø–æ–∫ —Ä–µ–∂–∏–º–æ–≤
            if hasattr(self, 'observer_button'):
                self.observer_button.setStyleSheet(self.get_mode_button_style())
                self.drawing_button.setStyleSheet(self.get_mode_button_style())
                self.edit_button.setStyleSheet(self.get_mode_button_style())
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            if hasattr(self, 'mode_label'):
                self.mode_label.setStyleSheet(AppStyles.get_mode_label_style(True))
                self.scale_label.setStyleSheet(AppStyles.get_mode_label_style(True))
                self.size_label.setStyleSheet(AppStyles.get_mode_label_style(True))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            if hasattr(self, 'wall_button'):
                self.wall_button.setStyleSheet(self.get_tool_button_style())
                self.region_button.setStyleSheet(self.get_tool_button_style())
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            if hasattr(self, 'drawing_label'):
                self.drawing_label.setStyleSheet(AppStyles.get_mode_label_style(True))
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            if hasattr(self, 'zoom_in_button'):
                self.zoom_in_button.setStyleSheet(AppStyles.get_scale_button_style(True))
                self.zoom_out_button.setStyleSheet(AppStyles.get_scale_button_style(True))
                self.reset_zoom_button.setStyleSheet(AppStyles.get_scale_button_style(True))
                self.scale_display.setStyleSheet(AppStyles.get_scale_display_style(True))
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
            for btn in self.findChildren(QPushButton):
                if btn.text() == "–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏":
                    btn.setStyleSheet(AppStyles.get_accent_button_style(True))
                    
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫–æ –≤—Å–µ–º –≤–∏–¥–∂–µ—Ç–∞–º —Å –º–µ—Ç–æ–¥–æ–º set_theme
            self._apply_theme_recursively(self, True)
        else:
            # –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
            self.setStyleSheet(AppStyles.LIGHT_MAIN_WINDOW)
            if hasattr(self, 'properties_window'):
                if hasattr(self.properties_window, 'set_theme'):
                    self.properties_window.set_theme(False)
                else:
                    self.properties_window.setStyleSheet(AppStyles.LIGHT_PROPERTIES_WINDOW)
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ –ø–æ–ª—é —Å—Ü–µ–Ω—ã
            if hasattr(self, 'field_widget') and hasattr(self.field_widget, 'set_theme'):
                self.field_widget.set_theme(False)
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫ QDockWidget
            if hasattr(self, 'properties_dock'):
                self.properties_dock.setStyleSheet(AppStyles.LIGHT_PROPERTIES_WINDOW)
            if hasattr(self, 'coords_label'):
                self.coords_label.setStyleSheet(AppStyles.LIGHT_COORDS_LABEL)
            if hasattr(self, 'theme_switch'):
                self.theme_switch.setStyleSheet(AppStyles.get_theme_switch_style(False))
                self.theme_switch.setText("üåô")  # –õ—É–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ç–µ–º–Ω—É—é —Ç–µ–º—É
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å —á–µ–∫–±–æ–∫—Å–∞
            if hasattr(self, 'snap_to_grid_checkbox'):
                self.snap_to_grid_checkbox.setStyleSheet(AppStyles.LIGHT_CHECKBOX_STYLE)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –∫–Ω–æ–ø–æ–∫ —Ä–µ–∂–∏–º–æ–≤
            if hasattr(self, 'observer_button'):
                self.observer_button.setStyleSheet(self.get_mode_button_style())
                self.drawing_button.setStyleSheet(self.get_mode_button_style())
                self.edit_button.setStyleSheet(self.get_mode_button_style())
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            if hasattr(self, 'mode_label'):
                self.mode_label.setStyleSheet(AppStyles.get_mode_label_style(False))
                self.scale_label.setStyleSheet(AppStyles.get_mode_label_style(False))
                self.size_label.setStyleSheet(AppStyles.get_mode_label_style(False))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            if hasattr(self, 'wall_button'):
                self.wall_button.setStyleSheet(self.get_tool_button_style())
                self.region_button.setStyleSheet(self.get_tool_button_style())
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            if hasattr(self, 'drawing_label'):
                self.drawing_label.setStyleSheet(AppStyles.get_mode_label_style(False))
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            if hasattr(self, 'zoom_in_button'):
                self.zoom_in_button.setStyleSheet(AppStyles.get_scale_button_style(False))
                self.zoom_out_button.setStyleSheet(AppStyles.get_scale_button_style(False))
                self.reset_zoom_button.setStyleSheet(AppStyles.get_scale_button_style(False))
                self.scale_display.setStyleSheet(AppStyles.get_scale_display_style(False))
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
            for btn in self.findChildren(QPushButton):
                if btn.text() == "–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏":
                    btn.setStyleSheet(AppStyles.get_accent_button_style(False))
                    
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫–æ –≤—Å–µ–º –≤–∏–¥–∂–µ—Ç–∞–º —Å –º–µ—Ç–æ–¥–æ–º set_theme
            self._apply_theme_recursively(self, False)
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–º—ã –≤ –∫–æ–Ω—Ñ–∏–≥
        config.set("appearance", "dark_theme", str(self.is_dark_theme))
        
    def _apply_theme_recursively(self, widget, is_dark_theme):
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º—É –∫–æ –≤—Å–µ–º –¥–æ—á–µ—Ä–Ω–∏–º –≤–∏–¥–∂–µ—Ç–∞–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–µ—Ç–æ–¥–∞ set_theme.
        
        Args:
            widget: –í–∏–¥–∂–µ—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –∏ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É
            is_dark_theme: True –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã, False –¥–ª—è —Å–≤–µ—Ç–ª–æ–π
        """
        # –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –≤–∏–¥–∂–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        ignored_widget_types = ["QComboBox", "QSpinBox", "QProgressBar", "QScrollBar", 
                               "QSlider", "QToolBar", "QTabBar", "QStatusBar", "QMenu"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –≤–∏–¥–∂–µ—Ç–∞
        widget_type = widget.metaObject().className()
        if widget_type in ignored_widget_types:
            return
            
        try:
            # –ï—Å–ª–∏ –≤–∏–¥–∂–µ—Ç –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥ set_theme, –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ
            if hasattr(widget, 'set_theme') and callable(widget.set_theme):
                widget.set_theme(is_dark_theme)
                return  # –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —Ç–∞–∫ –∫–∞–∫ –≤–∏–¥–∂–µ—Ç —Å–∞–º –¥–æ–ª–∂–µ–Ω —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –µ–µ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–µ–º—ã –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞ {widget}: {e}")
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫–æ –≤—Å–µ–º –¥–æ—á–µ—Ä–Ω–∏–º –≤–∏–¥–∂–µ—Ç–∞–º, –Ω–æ —Ç–æ–ª—å–∫–æ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º –ø–æ—Ç–æ–º–∫–∞–º
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–æ—á–µ—Ä–Ω–∏–µ –≤–∏–¥–∂–µ—Ç—ã
        for child in widget.children():
            if isinstance(child, QWidget):
                self._apply_theme_recursively(child, is_dark_theme)

    def toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–µ–º—É –º–µ–∂–¥—É —Å–≤–µ—Ç–ª–æ–π –∏ —Ç–µ–º–Ω–æ–π"""
        self.is_dark_theme = not self.is_dark_theme
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –∫–æ–Ω—Ñ–∏–≥
        config.set("appearance", "theme", "dark" if self.is_dark_theme else "light")
        config.set("appearance", "theme_name", "–¢–µ–º–Ω—ã–π —Å—Ç–∏–ª—å" if self.is_dark_theme else "–°–≤–µ—Ç–ª—ã–π —Å—Ç–∏–ª—å")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
        self.apply_theme()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä—ã
        self.setup_cursors()
        
    def add_shortcuts_help_button(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π –ø–æ–º–æ—â–∏
        separator_container = QWidget()
        separator_layout = QVBoxLayout()
        separator_layout.setContentsMargins(5, 10, 5, 10)
        
        separator = QFrame()
        separator.setFrameShape(QFrame.Shape.HLine)
        separator.setFrameShadow(QFrame.Shadow.Sunken)
        separator.setMinimumHeight(2)
        separator.setStyleSheet(f"background-color: {AppStyles.BORDER_COLOR if self.is_dark_theme else AppStyles.LIGHT_BORDER_COLOR};")
        
        separator_layout.addWidget(separator)
        separator_container.setLayout(separator_layout)
        self.toolbar.addWidget(separator_container)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        shortcuts_button = QPushButton("–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏")
        shortcuts_button.setStyleSheet(AppStyles.get_accent_button_style(self.is_dark_theme))
        shortcuts_button.clicked.connect(self.shortcuts_manager.show_shortcuts_dialog)
        shortcuts_button.setCursor(Qt.CursorShape.PointingHandCursor)
        self.toolbar.addWidget(shortcuts_button)

    def create_menubar(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        menubar = self.menuBar()

        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = menubar.addMenu("–§–∞–π–ª")
        
        # –î–µ–π—Å—Ç–≤–∏–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ XML"
        save_xml_action = QAction("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ XML", self)
        save_xml_action.triggered.connect(self.generate_xml)
        file_menu.addAction(save_xml_action)
        
        # –î–µ–π—Å—Ç–≤–∏–µ "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å XML"
        import_xml_action = QAction("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å XML", self)
        import_xml_action.triggered.connect(self.import_xml)
        file_menu.addAction(import_xml_action)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        file_menu.addSeparator()
        
        # –î–µ–π—Å—Ç–≤–∏–µ "–í—ã—Ö–æ–¥"
        exit_action = QAction("–í—ã—Ö–æ–¥", self)
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # –ú–µ–Ω—é "–í–∏–¥"
        view_menu = menubar.addMenu("–í–∏–¥")
        
        # –î–µ–π—Å—Ç–≤–∏–µ "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É"
        toggle_theme_action = QAction("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É", self)
        toggle_theme_action.triggered.connect(self.toggle_theme)
        view_menu.addAction(toggle_theme_action)
        
        # –î–µ–π—Å—Ç–≤–∏–µ "–ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏"
        shortcuts_action = QAction("–ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", self)
        shortcuts_action.triggered.connect(self.shortcuts_manager.show_shortcuts_dialog)
        view_menu.addAction(shortcuts_action)
        
        # –ú–µ–Ω—é "–ü–æ–º–æ—â—å"
        help_menu = menubar.addMenu("–ü–æ–º–æ—â—å")
        
        # –î–µ–π—Å—Ç–≤–∏–µ "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ"
        about_action = QAction("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", self)
        about_action.triggered.connect(self.show_about_dialog)
        help_menu.addAction(about_action)

    def show_about_dialog(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ'"""
        QMessageBox.about(
            self,
            "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
            "<h3>gScene ‚Äî –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å—Ü–µ–Ω—ã TRIK</h3>"
            f"<p>–í–µ—Ä—Å–∏—è {__version__}</p>"
            "<p>–†–µ–¥–∞–∫—Ç–æ—Ä —Å—Ü–µ–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω –¥–ª—è TRIK Studio.</p>"
            "<p>&copy; 2025</p>"
        )

    def import_xml(self):
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç XML-—Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Å—Ü–µ–Ω—É"""
        try:
            # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å XML-—Ñ–∞–π–ª
            file_name, _ = QFileDialog.getOpenFileName(self, "–û—Ç–∫—Ä—ã—Ç—å XML —Ñ–∞–π–ª", "", "XML Files (*.xml)")
            if not file_name:
                return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä
            
            # –°—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            with open(file_name, 'r', encoding='utf-8') as f:
                xml_content = f.read()
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω—É–∂–Ω–æ –ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É
            should_clear = QMessageBox.question(
                self, 
                "–ò–º–ø–æ—Ä—Ç XML", 
                "–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                QMessageBox.StandardButton.Yes
            ) == QMessageBox.StandardButton.Yes
            
            # –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –æ—á–∏—â–∞—Ç—å —Å—Ü–µ–Ω—É, –∑–∞–≥—Ä—É–∂–∞–µ–º XML –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏
            # (–Ω–∞—à –º–µ—Ç–æ–¥ load_xml –≤—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ—Ç —Å—Ü–µ–Ω—É, –ø–æ—ç—Ç–æ–º—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å)
            if not should_clear:
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä XMLHandler —Å —Ç–µ–∫—É—â–∏–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ —Å—Ü–µ–Ω—ã
                scene_width = self.field_widget.scene_width
                scene_height = self.field_widget.scene_height
                xml_handler = XMLHandler(scene_width=scene_width, scene_height=scene_height)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º XML-—Ñ–∞–π–ª
                scene_data = xml_handler.parse_xml(xml_content)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å—Ü–µ–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ XML
                if "scene_width" in scene_data and "scene_height" in scene_data:
                    self.field_widget.set_scene_size(scene_data["scene_width"], scene_data["scene_height"])
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–µ–Ω—ã –∏–∑ XML
                walls_added = 0
                for wall_data in scene_data["walls"]:
                    begin_point = QPointF(wall_data["begin"][0], wall_data["begin"][1])
                    end_point = QPointF(wall_data["end"][0], wall_data["end"][1])
                    wall = self.field_widget.add_wall(
                        p1=begin_point,
                        p2=end_point,
                        wall_id=wall_data["id"]
                    )
                    if wall:
                        walls_added += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω—ã –∏–∑ XML
                regions_added = 0
                for region_data in scene_data["regions"]:
                    rect = region_data["rect"]
                    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –∏–∑ QRectF –¥–ª—è Region
                    points = [
                        QPointF(rect.topLeft()),
                        QPointF(rect.topRight()),
                        QPointF(rect.bottomRight()),
                        QPointF(rect.bottomLeft())
                    ]
                    region = self.field_widget.place_region(
                        points=points,
                        region_id=region_data["id"],
                        color=region_data["color"]
                    )
                    if region:
                        regions_added += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–±–æ—Ç–∞ –∏–∑ XML, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –Ω–∞ —Å—Ü–µ–Ω–µ –Ω–µ—Ç —Ä–æ–±–æ—Ç–∞
                robot_added = False
                if scene_data["robot"] and not self.field_widget.robot_model:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º robot_id, —Ç–∞–∫ –∫–∞–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID
                    robot = self.field_widget.place_robot(
                        position=scene_data["robot"]["position"],
                        name=scene_data["robot"].get("name", ""),
                        direction=scene_data["robot"].get("direction", 0)
                    )
                    if robot:
                        robot_added = True
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ü–µ–Ω—É
                self.field_widget.update()
                
                # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–º–ø–æ—Ä—Ç–µ
                QMessageBox.information(
                    self, 
                    "–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω", 
                    f"–ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω:\n"
                    f"- –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Ç–µ–Ω: {walls_added}\n"
                    f"- –î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {regions_added}\n"
                    f"- {'–†–æ–±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω' if robot_added else '–†–æ–±–æ—Ç —É–∂–µ –±—ã–ª –Ω–∞ —Å—Ü–µ–Ω–µ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ'}"
                )
            else:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º XML —Å –æ—á–∏—Å—Ç–∫–æ–π —Å—Ü–µ–Ω—ã
                success = self.load_xml(xml_content)
                
                if success:
                    # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–º–ø–æ—Ä—Ç–µ
                    QMessageBox.information(
                        self, 
                        "–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω", 
                        "–ò–º–ø–æ—Ä—Ç XML-—Ñ–∞–π–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω."
                    )
            
        except XMLValidationError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ XML: {e}")
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ XML: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}", exc_info=True)
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ XML: {e}")

    def load_xml(self, xml_content):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç XML –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—ä–µ–∫—Ç—ã –Ω–∞ —Å—Ü–µ–Ω–µ.
        
        Args:
            xml_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ XML –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
            
        Returns:
            bool: True, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä XMLHandler —Å —Ç–µ–∫—É—â–∏–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ —Å—Ü–µ–Ω—ã
            scene_width = self.field_widget.scene_width
            scene_height = self.field_widget.scene_height
            xml_handler = XMLHandler(scene_width=scene_width, scene_height=scene_height)
            
            # –ü–∞—Ä—Å–∏–º XML
            scene_data = xml_handler.parse_xml(xml_content)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å—Ü–µ–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ XML
            if "scene_width" in scene_data and "scene_height" in scene_data:
                self.field_widget.set_scene_size(scene_data["scene_width"], scene_data["scene_height"])
            
            # –û—á–∏—â–∞–µ–º —Å—Ü–µ–Ω—É –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.field_widget.clear_scene()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–µ–Ω—ã –∏–∑ XML
            for wall_data in scene_data["walls"]:
                begin_point = QPointF(wall_data["begin"][0], wall_data["begin"][1])
                end_point = QPointF(wall_data["end"][0], wall_data["end"][1])
                wall = self.field_widget.add_wall(
                    p1=begin_point,
                    p2=end_point,
                    wall_id=wall_data["id"]
                )
                if not wall:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–µ–Ω—É: {wall_data}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω—ã –∏–∑ XML
            for region_data in scene_data["regions"]:
                rect = region_data["rect"]
                # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –∏–∑ QRectF –¥–ª—è Region
                points = [
                    QPointF(rect.topLeft()),
                    QPointF(rect.topRight()),
                    QPointF(rect.bottomRight()),
                    QPointF(rect.bottomLeft())
                ]
                region = self.field_widget.place_region(
                    points=points,
                    region_id=region_data["id"],
                    color=region_data["color"]
                )
                if not region:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥–∏–æ–Ω: {region_data}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–±–æ—Ç–∞ –∏–∑ XML, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if scene_data["robot"]:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º robot_id, —Ç–∞–∫ –∫–∞–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID
                robot = self.field_widget.place_robot(
                    position=scene_data["robot"]["position"],
                    name=scene_data["robot"].get("name", ""),
                    direction=scene_data["robot"].get("direction", 0)
                )
                if not robot:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–±–æ—Ç–∞: {scene_data['robot']}")
                    
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ü–µ–Ω—É
            self.field_widget.update()
            
            return True
            
        except XMLValidationError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ XML: {e}")
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ XML: {e}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ XML: {e}", exc_info=True)
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ XML: {e}")
            return False