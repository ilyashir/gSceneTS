from PyQt6.QtWidgets import (
    QMainWindow, QToolBar, QToolButton, QPushButton, QLineEdit, QWidget, QHBoxLayout, QVBoxLayout, QLabel,
    QCheckBox, QSpacerItem, QSizePolicy, QFileDialog, QDockWidget, QSpinBox, QDoubleSpinBox, QButtonGroup, QStatusBar, QFrame
)
from PyQt6.QtGui import QIcon
from PyQt6.QtCore import Qt, pyqtSignal
from field_widget import FieldWidget
from properties_window import PropertiesWindow
import xml.etree.ElementTree as ET
from xml.dom import minidom 
from PyQt6.QtWidgets import QMessageBox
import logging
from styles import AppStyles
from config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

class MainWindow(QMainWindow):
    scene_size_changed = pyqtSignal(int, int)  # width, height

    def __init__(self):
        super().__init__()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        app_name = config.get("app", "name")
        self.scene_width = config.get("scene", "default_width")
        self.scene_height = config.get("scene", "default_height")
        self.grid_size = config.get("grid", "size")
        self.snap_to_grid_default = config.get("grid", "snap_to_grid")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
        self.is_dark_theme = config.get("appearance", "theme") == "dark"
        
        self.setWindowTitle(app_name)
        self.resize(1200, 800)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        self.showMaximized()  # –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –∫ –≥–ª–∞–≤–Ω–æ–º—É –æ–∫–Ω—É
        self.apply_theme()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Ç–µ–º—ã
        self.coords_panel = QWidget()
        coords_layout = QHBoxLayout()
        coords_layout.setContentsMargins(5, 5, 5, 5)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        self.coords_label = QLabel("X: 0, Y: 0", self)
        self.coords_label.setStyleSheet(AppStyles.get_coords_label_style(self.is_dark_theme))
        coords_layout.addWidget(self.coords_label)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –±—ã–ª —Å–ø—Ä–∞–≤–∞
        coords_layout.addStretch()
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã
        self.theme_switch = QPushButton("üåô" if not self.is_dark_theme else "‚òÄÔ∏è", self)
        self.theme_switch.setStyleSheet(AppStyles.get_theme_switch_style(self.is_dark_theme))
        self.theme_switch.setCursor(Qt.CursorShape.PointingHandCursor)
        self.theme_switch.clicked.connect(self.toggle_theme)
        self.theme_switch.setToolTip("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É")
        coords_layout.addWidget(self.theme_switch)
        
        self.coords_panel.setLayout(coords_layout)

        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Å–≤–æ–π—Å—Ç–≤
        self.properties_window = PropertiesWindow()
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É –¥–ª—è –æ–∫–Ω–∞ —Å–≤–æ–π—Å—Ç–≤
        if hasattr(self.properties_window, 'set_theme'):
            self.properties_window.set_theme(self.is_dark_theme)
        else:
            self.properties_window.setStyleSheet(
                AppStyles.DARK_PROPERTIES_WINDOW if self.is_dark_theme else AppStyles.LIGHT_PROPERTIES_WINDOW
            )
        self.properties_dock = QDockWidget("–°–≤–æ–π—Å—Ç–≤–∞", self)
        self.properties_dock.setWidget(self.properties_window)
        self.properties_dock.setStyleSheet(
            AppStyles.DARK_PROPERTIES_WINDOW if self.is_dark_theme else AppStyles.LIGHT_PROPERTIES_WINDOW
        )
        self.addDockWidget(Qt.DockWidgetArea.RightDockWidgetArea, self.properties_dock)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ FieldWidget
        container = QWidget()
        layout = QVBoxLayout()
        layout.addWidget(self.coords_panel)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–∫–Ω–æ —Å –ø–æ–ª–µ–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.field_widget = FieldWidget(self.properties_window, 
                                        scene_width=self.scene_width, 
                                        scene_height=self.scene_height,
                                        grid_size=self.grid_size)       
        layout.addWidget(self.field_widget)
    
        container.setLayout(layout)
        self.setCentralWidget(container)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.scene_size_changed.connect(self.field_widget.set_scene_size)
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –æ–∫–Ω–∞ —Å–≤–æ–π—Å—Ç–≤
        self.properties_window.robot_position_changed.connect(self.field_widget.update_robot_position)
        self.properties_window.robot_rotation_changed.connect(self.field_widget.update_robot_rotation)
        self.properties_window.wall_position_point1_changed.connect(self.field_widget.update_wall_point1)
        self.properties_window.wall_position_point2_changed.connect(self.field_widget.update_wall_point2)
        self.properties_window.wall_size_changed.connect(self.field_widget.update_wall_size)
        self.properties_window.region_position_changed.connect(self.field_widget.update_region_position)
        self.properties_window.region_size_changed.connect(self.field_widget.update_region_size)
        self.properties_window.region_color_changed.connect(self.field_widget.update_region_color)
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è ID –æ—Ç –æ–∫–Ω–∞ —Å–≤–æ–π—Å—Ç–≤
        self.properties_window.wall_id_changed.connect(self.field_widget.update_wall_id)
        self.properties_window.region_id_changed.connect(self.field_widget.update_region_id)
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º—ã—à–∏
        self.field_widget.mouse_coords_updated.connect(self.update_coords_label)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è/–æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ —Å–≤–æ–π—Å—Ç–≤
        self.toggle_properties_button = QToolButton(self)
        self.toggle_properties_button.setIcon(QIcon("images/icon.webp"))  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ
        self.toggle_properties_button.setToolTip("Toggle Properties")
        self.toggle_properties_button.setStyleSheet(AppStyles.get_toggle_button_style(self.is_dark_theme))
        self.toggle_properties_button.clicked.connect(self.toggle_properties_panel)        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏
        self.toggle_properties_button.setCursor(Qt.CursorShape.PointingHandCursor)
        self.toggle_properties_button.setToolTip("–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —Å–≤–æ–π—Å—Ç–≤")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        self.right_toolbar = QToolBar("Right Toolbar", self)
        self.right_toolbar.addWidget(self.toggle_properties_button)
        self.addToolBar(Qt.ToolBarArea.RightToolBarArea, self.right_toolbar)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–µ–≤–∞—è –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.toolbar = QToolBar()
        self.toolbar.setMinimumWidth(180)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.addToolBar(Qt.ToolBarArea.LeftToolBarArea, self.toolbar)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        self.create_scene_size_widget()

        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å "–ü—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å—Å—è –∫ —Å–µ—Ç–∫–µ"
        snap_to_grid_container = QWidget()
        snap_to_grid_layout = QHBoxLayout()
        snap_to_grid_layout.setContentsMargins(10, 0, 0, 0)  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞
        
        self.snap_to_grid_checkbox = QCheckBox("–ü—Ä–∏–≤—è–∑–∞—Ç—å—Å—è –∫ —Å–µ—Ç–∫–µ", self)
        self.snap_to_grid_checkbox.setStyleSheet(AppStyles.DARK_CHECKBOX_STYLE if self.is_dark_theme else AppStyles.LIGHT_CHECKBOX_STYLE)
        self.snap_to_grid_checkbox.setChecked(self.field_widget.snap_to_grid_enabled)
        self.snap_to_grid_checkbox.stateChanged.connect(self.toggle_snap_to_grid)
        self.snap_to_grid_checkbox.setCursor(Qt.CursorShape.PointingHandCursor)
        
        snap_to_grid_layout.addWidget(self.snap_to_grid_checkbox)
        snap_to_grid_container.setLayout(snap_to_grid_layout)
        self.toolbar.addWidget(snap_to_grid_container)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–æ–≤
        self.create_mode_buttons()
        self.create_drawing_buttons()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML
        separator_container = QWidget()
        separator_layout = QVBoxLayout()
        separator_layout.setContentsMargins(5, 10, 5, 10)  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É
        
        separator = QFrame()
        separator.setFrameShape(QFrame.Shape.HLine)
        separator.setFrameShadow(QFrame.Shadow.Sunken)
        separator.setMinimumHeight(2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –ª–∏–Ω–∏–∏
        separator.setStyleSheet(f"background-color: {AppStyles.BORDER_COLOR if self.is_dark_theme else AppStyles.LIGHT_BORDER_COLOR};")
        
        separator_layout.addWidget(separator)
        separator_container.setLayout(separator_layout)
        self.toolbar.addWidget(separator_container)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML
        generate_button = QPushButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å XML")
        generate_button.setStyleSheet(AppStyles.get_accent_button_style(self.is_dark_theme))
        generate_button.clicked.connect(self.generate_xml)
        generate_button.setCursor(Qt.CursorShape.PointingHandCursor)
        self.toolbar.addWidget(generate_button)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.set_mode("observer")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_cursors()
    
    def setup_cursors(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫—É—Ä—Å–æ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        for button in self.findChildren(QPushButton) + self.findChildren(QToolButton):
            button.setCursor(Qt.CursorShape.PointingHandCursor)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä—ã –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
        for checkbox in self.findChildren(QCheckBox):
            checkbox.setCursor(Qt.CursorShape.PointingHandCursor)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä—ã –¥–ª—è SpinBox
        for spinbox in self.findChildren(QSpinBox) + self.findChildren(QDoubleSpinBox):
            # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Å–ø–∏–Ω–±–æ–∫—Å–∞
            for child in spinbox.findChildren(QWidget):
                if 'Button' in child.__class__.__name__:
                    child.setCursor(Qt.CursorShape.PointingHandCursor)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è properties_window
        if hasattr(self, 'properties_window'):
            self.properties_window.setup_cursors()

    def update_coords_label(self, x, y):
        # –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ QLabel —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –º—ã—à–∏.
        self.coords_label.setText(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º—ã—à–∏: X: {x:.2f}, Y: {y:.2f}")

    def toggle_snap_to_grid(self, state):
        """–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç –ø—Ä–∏–≤—è–∑–∫—É –∫ —Å–µ—Ç–∫–µ."""
        enabled = state == Qt.CheckState.Checked.value
        self.field_widget.snap_to_grid_enabled = enabled
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –∫–æ–Ω—Ñ–∏–≥
        config.set("grid", "snap_to_grid", enabled)
    
    def toggle_properties_panel(self):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å–≤–æ–π—Å—Ç–≤."""
        if self.properties_dock.isVisible():
            self.properties_dock.hide()
        else:
            self.properties_dock.show()
    
    def create_scene_size_widget(self):
        size_widget = QWidget()
        size_layout = QVBoxLayout()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç
        size_layout.setSpacing(5)  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        size_layout.setContentsMargins(5, 0, 5, 0)  # –≤–Ω–µ—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã
        size_widget.setLayout(size_layout)

        # –õ–µ–π–±–ª "–†–∞–∑–º–µ—Ä —Å—Ü–µ–Ω—ã"
        size_label = QLabel("–†–∞–∑–º–µ—Ä —Å—Ü–µ–Ω—ã")
        size_label.setStyleSheet(AppStyles.get_mode_label_style(self.is_dark_theme))
        size_layout.addWidget(size_label)

        # –í–∏–¥–∂–µ—Ç –¥–ª—è –ª–µ–π–±–ª–æ–≤ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        input_labels_widget = QWidget()
        input_labels_layout = QHBoxLayout()  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç –¥–ª—è –ª–µ–π–±–ª–æ–≤ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        input_labels_layout.setSpacing(0)  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        input_labels_layout.setContentsMargins(5, 0, 5, 0)  
        input_labels_widget.setLayout(input_labels_layout)

        self.input_height_label = QLabel("–í—ã—Å–æ—Ç–∞ —Å—Ü–µ–Ω—ã:")
        self.input_width_label = QLabel("–®–∏—Ä–∏–Ω–∞ —Å—Ü–µ–Ω—ã:")
        input_labels_layout.addWidget(self.input_height_label)
        input_labels_layout.addWidget(self.input_width_label)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç —Å –ø–æ–ª—è–º–∏ –≤–≤–æ–¥–∞ –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç
        size_layout.addWidget(input_labels_widget)

        # –í–∏–¥–∂–µ—Ç –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        input_widget = QWidget()
        input_layout = QHBoxLayout()  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        input_layout.setSpacing(5)  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª—è–º–∏ –≤–≤–æ–¥–∞
        input_layout.setContentsMargins(0, 0, 0, 0)  # –£–±–∏—Ä–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã
        input_widget.setLayout(input_layout)

        # –ü–æ–ª–µ –¥–ª—è —à–∏—Ä–∏–Ω—ã
        self.width_input = QLineEdit(str(self.field_widget.scene_width))
        self.width_input.setPlaceholderText("Width")
        self.width_input.setCursor(Qt.CursorShape.IBeamCursor)
        input_layout.addWidget(self.width_input)

        # –ü–æ–ª–µ –¥–ª—è –≤—ã—Å–æ—Ç—ã
        self.height_input = QLineEdit(str(self.field_widget.scene_height))
        self.height_input.setPlaceholderText("Height")
        self.height_input.setCursor(Qt.CursorShape.IBeamCursor)
        input_layout.addWidget(self.height_input)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç —Å –ø–æ–ª—è–º–∏ –≤–≤–æ–¥–∞ –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç
        size_layout.addWidget(input_widget)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π   
        self.apply_button = QPushButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å", self)
        self.apply_button.setStyleSheet(AppStyles.get_accent_button_style(self.is_dark_theme))
        self.apply_button.setCursor(Qt.CursorShape.PointingHandCursor)
        self.apply_button.clicked.connect(self.apply_size_changes)
        size_layout.addWidget(self.apply_button)

        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
        spacer_widget = QWidget()
        spacer_widget.setFixedHeight(30)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –æ—Ç—Å—Ç—É–ø–∞
        size_layout.addWidget(spacer_widget)  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –Ω–∞ –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –Ω–∞ –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.toolbar.addWidget(size_widget)

    def apply_size_changes(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–º–µ–Ω–∏—Ç—å'."""
        try:
            new_width = int(self.width_input.text())
            new_height = int(self.height_input.text())
        
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if new_width <= 0 or new_height <= 0:
                raise ValueError("Width and height must be greater than 0.")
        except ValueError as e:
            QMessageBox.warning(
                self,
                "–û—à–∏–±–∫–∞",
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã –∏–ª–∏ –≤—ã—Å–æ—Ç—ã: {e}",
                QMessageBox.StandardButton.Ok
            )
            return

        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å—Ü–µ–Ω—ã
        self.scene_size_changed.emit(new_width, new_height)

    def create_mode_buttons(self):
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–∂–∏–º–æ–≤
        mode_container = QWidget()
        mode_layout = QVBoxLayout()  # –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–¥–∞
        mode_layout.setSpacing(5)
        mode_layout.setContentsMargins(5, 0, 5, 0)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–†–µ–∂–∏–º"
        self.mode_label = QLabel("–†–µ–∂–∏–º")
        self.mode_label.setStyleSheet(AppStyles.get_mode_label_style(self.is_dark_theme))
        mode_layout.addWidget(self.mode_label)
        
        # –ì—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
        mode_buttons_group = QButtonGroup(self)
        
        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–∂–∏–º–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
        self.observer_button = QPushButton("–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å")
        self.observer_button.setCheckable(True)
        self.observer_button.setChecked(True)  # –í—ã–±—Ä–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.observer_button.setStyleSheet(self.get_mode_button_style())
        self.observer_button.clicked.connect(lambda: self.set_mode("observer"))
        self.observer_button.setCursor(Qt.CursorShape.PointingHandCursor)
        mode_layout.addWidget(self.observer_button)
        mode_buttons_group.addButton(self.observer_button)
        
        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.edit_button = QPushButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        self.edit_button.setCheckable(True)
        self.edit_button.setStyleSheet(self.get_mode_button_style())
        self.edit_button.clicked.connect(lambda: self.set_mode("edit"))
        self.edit_button.setCursor(Qt.CursorShape.PointingHandCursor)
        mode_layout.addWidget(self.edit_button)
        mode_buttons_group.addButton(self.edit_button)
        
        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        self.drawing_button = QPushButton("–†–∏—Å–æ–≤–∞–Ω–∏–µ")
        self.drawing_button.setCheckable(True)
        self.drawing_button.setStyleSheet(self.get_mode_button_style())
        self.drawing_button.clicked.connect(lambda: self.set_mode("drawing"))
        self.drawing_button.setCursor(Qt.CursorShape.PointingHandCursor)
        mode_layout.addWidget(self.drawing_button)
        mode_buttons_group.addButton(self.drawing_button)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫–µ—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        mode_container.setLayout(mode_layout)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.toolbar.addWidget(mode_container)
        
    def create_drawing_buttons(self):
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        drawing_container = QWidget()
        drawing_layout = QVBoxLayout()  # –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç
        drawing_layout.setSpacing(5)
        drawing_layout.setContentsMargins(5, 0, 5, 0)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–†–∏—Å–æ–≤–∞—Ç—å"
        self.drawing_label = QLabel("–†–∏—Å–æ–≤–∞—Ç—å")
        self.drawing_label.setStyleSheet(AppStyles.get_mode_label_style(self.is_dark_theme))
        drawing_layout.addWidget(self.drawing_label)
        
        # –ì—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        drawing_buttons_group = QButtonGroup(self)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Å—Ç–µ–Ω
        self.wall_button = QPushButton("–°—Ç–µ–Ω–∞")
        self.wall_button.setCheckable(True)
        self.wall_button.setStyleSheet(self.get_tool_button_style())
        self.wall_button.clicked.connect(lambda: self.set_drawing_type("wall"))
        self.wall_button.setEnabled(False)
        self.wall_button.setCursor(Qt.CursorShape.PointingHandCursor)
        drawing_layout.addWidget(self.wall_button)
        drawing_buttons_group.addButton(self.wall_button)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤
        self.region_button = QPushButton("–†–µ–≥–∏–æ–Ω")
        self.region_button.setCheckable(True)
        self.region_button.setStyleSheet(self.get_tool_button_style())
        self.region_button.clicked.connect(lambda: self.set_drawing_type("region"))
        self.region_button.setEnabled(False)
        self.region_button.setCursor(Qt.CursorShape.PointingHandCursor)
        drawing_layout.addWidget(self.region_button)
        drawing_buttons_group.addButton(self.region_button)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫–µ—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        drawing_container.setLayout(drawing_layout)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.toolbar.addWidget(drawing_container)
    
    def get_mode_button_style(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∏–ª—å –∫–Ω–æ–ø–æ–∫ —Ä–µ–∂–∏–º–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã"""
        return AppStyles.get_mode_button_style(self.is_dark_theme)
    
    def get_tool_button_style(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∏–ª—å –∫–Ω–æ–ø–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã"""
        return AppStyles.get_tool_button_style(self.is_dark_theme)

    def set_mode(self, mode):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã."""
        logger.debug(f"Setting mode to: {mode}")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–æ–≤
        self.observer_button.setChecked(False)
        self.drawing_button.setChecked(False)
        self.edit_button.setChecked(False)
        
        # –í–∫–ª—é—á–∞–µ–º –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É
        if mode == "observer":
            logger.debug("Switching to observer mode")
            self.observer_button.setChecked(True)
            self.wall_button.setEnabled(False)
            self.region_button.setEnabled(False)
            self.field_widget.set_drawing_mode(None)
            self.field_widget.set_edit_mode(False)
        elif mode == "drawing":
            logger.debug("Switching to drawing mode")
            self.drawing_button.setChecked(True)
            self.wall_button.setEnabled(True)
            self.region_button.setEnabled(True)
            self.field_widget.set_edit_mode(False)
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∂–∏–º
            if self.wall_button.isChecked():
                self.field_widget.set_drawing_mode("wall")
            elif self.region_button.isChecked():
                self.field_widget.set_drawing_mode("region")
        elif mode == "edit":
            logger.debug("Switching to edit mode")
            self.edit_button.setChecked(True)
            self.wall_button.setEnabled(False)
            self.region_button.setEnabled(False)
            self.field_widget.set_drawing_mode(None)
            self.field_widget.set_edit_mode(True)
    
    def set_drawing_type(self, drawing_type):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∏–ø —Ä–∏—Å–æ–≤–∞–Ω–∏—è (—Å—Ç–µ–Ω–∞ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω)."""
        logger.debug(f"Setting drawing type to: {drawing_type}")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –æ–±–µ –∫–Ω–æ–ø–∫–∏
        self.wall_button.setChecked(False)
        self.region_button.setChecked(False)
        
        # –í–∫–ª—é—á–∞–µ–º –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É
        if drawing_type == "wall":
            logger.debug("Setting wall drawing mode")
            self.wall_button.setChecked(True)
            self.field_widget.set_drawing_mode("wall")
        elif drawing_type == "region":
            logger.debug("Setting region drawing mode")
            self.region_button.setChecked(True)
            self.field_widget.set_drawing_mode("region")
        else:
            logger.debug("Clearing drawing mode")
            self.field_widget.set_drawing_mode(None)

    def generate_xml(self):
        try:
            root = ET.Element("root")
            world = ET.SubElement(root, "world")

            walls_elem = ET.SubElement(world, "walls")
            for wall in self.field_widget.walls:
                begin = f"{wall.line().x1()}:{wall.line().y1()}"
                end = f"{wall.line().x2()}:{wall.line().y2()}"
                id = f"{wall.id}"
                ET.SubElement(walls_elem, "wall", begin=begin, end=end, id=id)

            regions_elem = ET.SubElement(world, "regions")
            for region in self.field_widget.regions:
                x = region.rect().x()
                y = region.rect().y()
                width = region.rect().width()
                height = region.rect().height()
                id = str(region.id)
                color = str(region.color)
                ET.SubElement(regions_elem, "region", x=str(x), y=str(y), width=str(width), height=str(height), id=id, color=color)

            if self.field_widget.robot_model:
                robot_elem = ET.SubElement(root, "robots")
                x = self.field_widget.robot_model.pos().x()
                y = self.field_widget.robot_model.pos().y()
                ET.SubElement(robot_elem, "robot", position=f"{x}:{y}")

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ElementTree –≤ —Å—Ç—Ä–æ–∫—É
            xml_str = ET.tostring(root, encoding="utf-8", xml_declaration=True)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º XML —Å –ø–æ–º–æ—â—å—é minidom
            formatted_xml = minidom.parseString(xml_str).toprettyxml(indent="    ")

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π XML –≤ —Ñ–∞–π–ª
            file_name, _ = QFileDialog.getSaveFileName(self, "Save XML File", "", "XML Files (*.xml)")
            if file_name:
                with open(file_name, "w", encoding="utf-8") as file:
                    file.write(formatted_xml)

                QMessageBox.information(self, "Success", "XML file generated successfully.")
        
        except Exception as e:
            QMessageBox.critical(self, "Error", f"An error occurred: {e}")

    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é"""
        if self.is_dark_theme:
            # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
            self.setStyleSheet(AppStyles.DARK_MAIN_WINDOW)
            if hasattr(self, 'properties_window'):
                if hasattr(self.properties_window, 'set_theme'):
                    self.properties_window.set_theme(True)
                else:
                    self.properties_window.setStyleSheet(AppStyles.DARK_PROPERTIES_WINDOW)
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ –ø–æ–ª—é —Å—Ü–µ–Ω—ã
            if hasattr(self, 'field_widget') and hasattr(self.field_widget, 'set_theme'):
                self.field_widget.set_theme(True)
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫ QDockWidget
            if hasattr(self, 'properties_dock'):
                self.properties_dock.setStyleSheet(AppStyles.DARK_PROPERTIES_WINDOW)
            if hasattr(self, 'coords_label'):
                self.coords_label.setStyleSheet(AppStyles.DARK_COORDS_LABEL)
            if hasattr(self, 'theme_switch'):
                self.theme_switch.setStyleSheet(AppStyles.get_theme_switch_style(True))
                self.theme_switch.setText("‚òÄÔ∏è")  # –°–æ–ª–Ω—Ü–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å —á–µ–∫–±–æ–∫—Å–∞
            if hasattr(self, 'snap_to_grid_checkbox'):
                self.snap_to_grid_checkbox.setStyleSheet(AppStyles.DARK_CHECKBOX_STYLE)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –∫–Ω–æ–ø–æ–∫ —Ä–µ–∂–∏–º–æ–≤
            if hasattr(self, 'observer_button'):
                self.observer_button.setStyleSheet(self.get_mode_button_style())
                self.drawing_button.setStyleSheet(self.get_mode_button_style())
                self.edit_button.setStyleSheet(self.get_mode_button_style())
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            if hasattr(self, 'mode_label'):
                self.mode_label.setStyleSheet(AppStyles.get_mode_label_style(True))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            if hasattr(self, 'wall_button'):
                self.wall_button.setStyleSheet(self.get_tool_button_style())
                self.region_button.setStyleSheet(self.get_tool_button_style())
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            if hasattr(self, 'drawing_label'):
                self.drawing_label.setStyleSheet(AppStyles.get_mode_label_style(True))
        else:
            # –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
            self.setStyleSheet(AppStyles.LIGHT_MAIN_WINDOW)
            if hasattr(self, 'properties_window'):
                if hasattr(self.properties_window, 'set_theme'):
                    self.properties_window.set_theme(False)
                else:
                    self.properties_window.setStyleSheet(AppStyles.LIGHT_PROPERTIES_WINDOW)
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ –ø–æ–ª—é —Å—Ü–µ–Ω—ã
            if hasattr(self, 'field_widget') and hasattr(self.field_widget, 'set_theme'):
                self.field_widget.set_theme(False)
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫ QDockWidget
            if hasattr(self, 'properties_dock'):
                self.properties_dock.setStyleSheet(AppStyles.LIGHT_PROPERTIES_WINDOW)
            if hasattr(self, 'coords_label'):
                self.coords_label.setStyleSheet(AppStyles.LIGHT_COORDS_LABEL)
            if hasattr(self, 'theme_switch'):
                self.theme_switch.setStyleSheet(AppStyles.get_theme_switch_style(False))
                self.theme_switch.setText("üåô")  # –õ—É–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ç–µ–º–Ω—É—é —Ç–µ–º—É
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å —á–µ–∫–±–æ–∫—Å–∞
            if hasattr(self, 'snap_to_grid_checkbox'):
                self.snap_to_grid_checkbox.setStyleSheet(AppStyles.LIGHT_CHECKBOX_STYLE)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –∫–Ω–æ–ø–æ–∫ —Ä–µ–∂–∏–º–æ–≤
            if hasattr(self, 'observer_button'):
                self.observer_button.setStyleSheet(self.get_mode_button_style())
                self.drawing_button.setStyleSheet(self.get_mode_button_style())
                self.edit_button.setStyleSheet(self.get_mode_button_style())
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            if hasattr(self, 'mode_label'):
                self.mode_label.setStyleSheet(AppStyles.get_mode_label_style(False))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            if hasattr(self, 'wall_button'):
                self.wall_button.setStyleSheet(self.get_tool_button_style())
                self.region_button.setStyleSheet(self.get_tool_button_style())
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            if hasattr(self, 'drawing_label'):
                self.drawing_label.setStyleSheet(AppStyles.get_mode_label_style(False))
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–º—ã –≤ –∫–æ–Ω—Ñ–∏–≥
        config.set("appearance", "dark_theme", str(self.is_dark_theme))

    def toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–µ–º—É –º–µ–∂–¥—É —Å–≤–µ—Ç–ª–æ–π –∏ —Ç–µ–º–Ω–æ–π"""
        self.is_dark_theme = not self.is_dark_theme
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –∫–æ–Ω—Ñ–∏–≥
        config.set("appearance", "theme", "dark" if self.is_dark_theme else "light")
        config.set("appearance", "theme_name", "–¢–µ–º–Ω—ã–π —Å—Ç–∏–ª—å" if self.is_dark_theme else "–°–≤–µ—Ç–ª—ã–π —Å—Ç–∏–ª—å")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
        self.apply_theme()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä—ã
        self.setup_cursors()